
== Implementace vybraných algoritmů v řešené oblasti

=== Výběr vhodných technologií

==== Výběr programovacího jazyka

Spark podporuje několik různých jazyků a to jsou Scala, Java, Python a R. Scala je jazyk, který se pokusil zkombinovat objektově orientované a funkcionální programování. Scala je JMV jazyk, který potřebuje ke svému běhu nainstalovanou Javu, konkrétně její běhové prostředí. Scala je nativní jazyk Sparku a jeho přidružených knihoven. Zdrojový kód v jazyce Scala se při komilaci převede do Java byte kódu. To znamená, že se aplikace distribuuje ve formě javovských archivů takzvaných jarů. Toto má za následek, že k vývoji aplikací můzeme použít také přímo Javu samotnou. Aplikace napsané v Javě mohou používat knihovny napsané ve Scale a naopak. Python je velice populární jazyk určený pro rychlé protypování. V posledních letech se stale vícemén standartem pro experimentování v oblasti umělé inteligence a strojového učení. Python má k dispozici mnoho specializovanćh knihoven jako jsou Sciki-learn nebo TensorFlow. Python není nativním jazykem Sparku, místo toho používá specializovanou knihovnu Py4J pro interakci s JVM. R je velice populární jazyk v rámci statistické komunity. 

Pro vývoj aplikace byl vyhodnocen jako nejvhodnější jazyk Scala. Při vývoji se budeme moci nechat inspirovat praktikami použitými při vývoji Sparku samotného, zejména jeho knihoven určených pro strojové učení. Dále budeme používat Python k optimalizaci hyper parametrů jednotlivých algoritmů. Python budeme používat interaktivně v prostředí takzvaných zápisniků.     

==== Výběr nástroje pro automatizaci buildů aplikace

Nástroj pro automatizaci buildů zaštíťuje kompletní cyklus sestavení aplikace. Toto zahrnuje zejména kompilaci zdrojového kódu a spuštění kompletní sady projektových testů. Na závěr cyklu nástroj vytvoří konečnou verzi aplikace a uloží ji pod příslušným identifikátorem verze do sdíleného repositáře. Pro aplikace vyvýjené v jazyce Scala existují dva základní build nástroje. První sbt (Scala build tool) je orientován výlučně na Scalu. Druhý, Apache Maven je obecný nástroj pro vývoj aplikací v Javě, který se stal víceméně standartem. Pro náš projekt byl vybrán nástroj Apache Maven. 

==== Výběr IDE

Vedle pro automatizaci buildů budeme dale potrebovat integrovane vyvojove prostredi . Takove prostredi usnadnuje psani zdrojoveho kodu spousteni jednotlivych testu atd. Na toto prostredi bylo nekolik zakladnich pozadavku ktere musi splnovat:

1) Podpora Pache Maven. IDE by melo byt schopne naimportovat informace s deskriptoru aplikace. Primarne se jedna o sadu zavislosti, ktera by mela byt nadefinovana na jedinem miste. Apache Maven je zahrnuta ve vetsine java IDE.

2) Podpora Scaly. Scala je jeden z monha JVM jazyku a je mnohem mene pouzivana nez Java samotna. Kvalitni pdpora toho jazyka nei uplne bezna.

2) Podpora Scala testu. Ackoliv je Apache Maven skvely nastroj a pri sestavovani aplikace spusti kompletni sadu testu, pri implementaci samotne potrebujeme jemnejsi kontrolu nad tim , ktery test spoustime. IDE by melo tuto moznost podporovat a umoznit nam spoustet dane testy jednotlive podle potreby. V nasem porojektu pouzijeme stejny testovaci ramec jako je pouzity ve Sparku samotnem. To proto aby jsme mohli pouzit stejen kontruktuy usnadnujici vytvareni a rusenich instanci SParku samotneho. 


Do uzsiho vyberu postoupili dva kandidati. Prvni je Scala IDE, vyvojove postredi postavene na popularni platforme Eclipse. Druhe je nemene popularni vyvojove prostredi IntelliJ IDEA. Scala IDE ve verzi 4.7.0 splnovalo prvni dva z nasich pozadavku. Nicmene se nepodarila uzpokojive zapojit podpora testu. IntelliJ IDEA splniula vsechny tri pozadavky na vybornou. Pro vyvoj nasi plaikce tedy pouzijeme toto IDE.


Zejména proto, že osahuje Tento je velice flexibilni a dobre zdokumentovany <https://maven.apache.org>. 