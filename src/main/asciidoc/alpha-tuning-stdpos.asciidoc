[source, ipython3]
----
%load_ext autoreload
%env SPARK_HOME=/usr/hdp/current/spark2-client

import findspark
findspark.init()
print('findspark initialized ...')

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import expr, col, column, max, min
----


----
The autoreload extension is already loaded. To reload it, use:
  %reload_ext autoreload
env: SPARK_HOME=/usr/hdp/current/spark2-client
findspark initialized ...
----

[source, ipython3]
----
def initspark():
    spark = SparkSession.builder.appName('mlonspark')\
        .config('spark.executor.instances', '3')\
        .getOrCreate()
    print('pyspark ready ...')
    return spark
----

[source, ipython3]
----
from pyspark.ml.recommendation import ALS
def initalg(val):
    return ALS()\
    .setUserCol("userId")\
    .setItemCol("artistId")\
    .setRatingCol("stdCountPos")\
    .setRank(25)\
    .setRegParam(0.0)\
    .setAlpha(val)\
    .setImplicitPrefs(True)

----

[source, ipython3]
----
import matplotlib as mpl
import matplotlib.pyplot as plt

def plot(res):
    x = []
    yTrain = []
    yTest = []
    for v in res:
        x.append(v[0])
        yTrain.append(v[1])
        yTest.append(v[2])

    plt.figure(figsize=(8,4))
    plt.plot(x, yTrain, "g-", linewidth=2, label=r"$TRAIN$")
    plt.plot(x, yTest, "r:", linewidth=2, label=r"TEST")
    plt.legend(loc="upper left", fontsize=15)
    plt.ylabel("RMSE", fontsize=18)
----

[source, ipython3]
----
from pyspark.ml.evaluation import RegressionEvaluator
from pyspark.sql.functions import isnan

def runtest(rng, **model_kargs):
    res = []
    for i in rng:
        spark = initspark();
        train = spark.read.load("/data/lastfm-dataset-360K/data-filtered-std-pos-train.parquet")
        test = spark.read.load("/data/lastfm-dataset-360K/data-filtered-std-pos-test.parquet")
        
        evaluator = RegressionEvaluator()\
            .setMetricName("rmse")\
            .setLabelCol("stdCountPos")\
            .setPredictionCol("prediction")
        
        alg = initalg(i)
        model = alg.fit(train)
        trainPredictions = model.transform(train)
        trainPredictionsFiltered = trainPredictions.where(~isnan(col("prediction")))  
        trainRmse = evaluator.evaluate(trainPredictionsFiltered)
        
        
        testPredictions = model.transform(test)
        testPredictionsFiltered = testPredictions.where(~isnan(col("prediction")))    
        
        
        testRmse = evaluator.evaluate(testPredictionsFiltered)
        
        
        res.append([i, trainRmse, testRmse])
        plot(res)
        spark.stop()
    return res
----

[source, ipython3]
----
%matplotlib inline

import numpy as np
rng = np.arange(0.0, 10.0, 1.0).tolist()
res = runtest(rng)
print(res)
----


----
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
pyspark ready ...
[[0.0, 1.3143074170761704, 1.3391206050406126], [1.0, 1.2643794435579059, 1.2954726520965618], [2.0, 1.2333473862303554, 1.2663063470779827], [3.0, 1.2106997513597, 1.2446015384674556], [4.0, 1.192782570596367, 1.2272568593760238], [5.0, 1.1779790250704811, 1.2128194898230416], [6.0, 1.1654077950439043, 1.200495727174422], [7.0, 1.1545152560184082, 1.1897753730281155], [8.0, 1.1449295741086511, 1.1803115469238803], [9.0, 1.1363890870049322, 1.171857848962004]]
----


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_1.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_2.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_3.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_4.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_5.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_6.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_7.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_8.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_9.png[title=""]


[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_5_10.png[title=""]

[source, ipython3]
----
x = []
yTrain = []
yTest = []
for v in res:
    x.append(v[0])
    yTrain.append(v[1])
    yTest.append(v[2])

print(yTest)
----


----
[1.3391206050406126, 1.2954726520965618, 1.2663063470779827, 1.2446015384674556, 1.2272568593760238, 1.2128194898230416, 1.200495727174422, 1.1897753730281155, 1.1803115469238803, 1.171857848962004]
----

[source, ipython3]
----
%matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt

plt.figure(figsize=(8,4))
plt.plot(x, yTrain, "g-", linewidth=2, label=r"$TRAIN$")
plt.plot(x, yTest, "r:", linewidth=2, label=r"TEST")
plt.legend(loc="upper left", fontsize=15)
plt.ylabel("RMSE", fontsize=18)
----




[[]]
image::../alpha-tuning-stdpos_files/alpha-tuning-stdpos_7_1.png[title=""]

[source, ipython3]
----

----
