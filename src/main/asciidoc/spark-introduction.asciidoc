
==  Apache Spark

Apache Spark je unifikovaný výpočetní systém pro paralelní zpracování dat na počítačových clustrech. Spark nabízí bohaté API pro datové operace jako je filtrování, spojováni (join), seskupování a agregace. Toto API je dostupné pro řadu populárních programovacích jazyků jako jsou Java, Python, C# a R. Spark je aktuálně nejaktivněji vyvíjeným open source projektem v této oblasti s vice nez tisícem aktivních vývojářů.

Filozofie Sparku je rozdílná od předcházejících platforem pro zpracovávání velkých objemů dat jako je například Hadoop, tento zahrnuje jak výpočetní systém (MapReduce) tak i úložiště dat (HDFS). Obě tyto části jsou spolu úzce provázané a je obtižné provozovat jednu část bez té druhé. Ačkoliv je možné Spark bez problémů provozovat nad HDFS není na tomto úložném systému nijak závislý a je možné ho používat i spolu s jinými zdroji dat. Jednou z motivací tohoto přístupu je, že data které je potřeba analyzovat, jsou typicky již uložena v rozdílných formátech v řadě různých úložných systémů. Přesouvání těchto dat pro analytické účely může byt zejména při vyšších objemech nepraktické. Spark je proto postaven tak aby byl přístup k datům co nejvíce transparentní.

Klíčovou vlastností Sparku je, že samotné provedení sekvence datových operací je nejprve optimalizováno. Tato optimalizace zajistí co možná nejefektivnější řetězec zpracování s využítím operační paměti pro mezivýsledky. To je velkou výhodou v rychlosti výpočtu oproti MapReduce kde se v každém kroku výsledky persistují a je nutné je v následujícím kroku řetězce znovu načíst.    

V diagramu <<spark-structure>> je zobrazena základní struktura Sparku. Základem je nízkoúrovňové API pro práci s datasety, RDD (Resilient Distributed Dataset) volně přeloženo jako pružný distribuovaný dataset. Dalšim patrem je strukturované API přidané v druhé generaci Sparku. Na RDD a strukturovaném API je postavena řada specifických modulů, které jsou součástí standartní distribuce Sparku. Mezi tyto moduly patří:

MLlib pro strojove uceni, 
Structured Spark Streaming pro datove proudy a 
GraphX pro analyzu grafu     

[[spark-structure]]
image::spark-structure.png[title="Struktura Sparku", pdfwidth="75%"]



Dalsi soucasti Sparku vedle jeho jadra je rada knihoven specializovanyvh pro ruzne aspekty analyzy dat. Tyto knihovny jsou jak standartni, distribuovane spolu se Sparkem, tak i knihovny vyvijene tretimi stranami v ramci open source komunit. Hlavnimi standartnimi knihovnami Apache Spark jsou Spark SQL pro podporu SQL dotazu a strukturovanych dat, MLlib pro strojove uceni, Structured Spark Streaming pro datove proudy a GraphX pro analyzu grafu [SDG].


=== Spark Aplikace

Spark aplikace se sklada z ridiciho procesu a sady vykonnych procesu. Ridici proces ja srdcem cele aplikace. Je zodpovedny za analyzu a distribuci ukolu jednotlivym vykonnych procesum. Dale udrzuje veskere spjate s danou apliaci. Vykonne procesy jsou zodpovedne za zpracovani ukolu, ktery jim priradi ridici proces a za reportovani stavu tohoto ukolu zpet ridicimu processu. Cluster pocitacu, ktere Spark vyuzije pro vykonani dane aplikace je rizeny cluster managerem. Tento manager ridi pristup k prostredkum clusteru a prirazuje jeho zdroje jednotlivym aplikacim. V ramci jednoho clusteru muze tedy bezet vice Spark aplikaci zaroven. Spark neni zavisly na jednom konkretnim cluster manageru, v dobe psani prace podporoval YARN, Mesos a vlastni takzvany Spark standalone cluster manager. Vyvojar Spark aplikace je odstineny od toho na jake ukoly bude aplikace rozdelena nebo na kterych pocitacich v ramci clustru budou tyto ukolly vykonany. O vse se transparente postara Spark spolu s pouzitym cluster manazerem.                                  


==== Odeslani aplikace

Aplikace samotna je typicky zkompilovana java knihovna obsahujici spustitelnou tridu. Zpusobu jak spustit aplikaci je mnoho, zakladni z nich je pouzit utilitu spark-submit z prikazove radky. V teto chvili spoustime proces na klientskem pocitaci, tento proces kontaktuje prislusny cluster manager a zazada si o prostredky pro ridici proces. Cluste manager umisti ridici proces samotny na nektery z dostupnych pocitacu. Proces spusteny z prikazove radky na klientskem pocitaci je dokoncen a aplikace je spustena. Prubezny stav aplikace je mozne sledovat pomoci dodatecnych dotazu na prislusny cluster mamanazer. 

V teto fazi je ridici proces umisteny na nekterem uzlu v clusteru. Ridici proces nasledne spusti uzivatelsky kod (spustitelna trida v ramci odeslane JARu). Tento kod musi obsahovat incializaci tridy SparkSession. SparkSession nasledne komunikuje s cluster manazerem a vazada si spusteni jednotlivych vykonnych procesu. Po inicializaci a spusteni jednotlivych vykonnych procesu odesle cluster manazer relevantni informace o jejich umisteni zpet ridicimu procesu.

V teto chvili mame inicializovany Spark cluster slozeny z jednoho ridiciho procesu a sady vykonnych procesu. Ridici proces prideluje jednotlive ukoly vykonnym procesum. Vykonne procesy komunikuji mezi sebou, vykonavaji ukoly a vymenuji is potrebna data. o dokonceni prideleneho ukolu reportuji vysledny status pzet ridicimu procesu.

Po dokonceni behu aplikace, je ridici proces ukoncen s vyslednym stavem,. Cluster manager nasledne ukonci vsechny pridelene vykonne procesy. V teto chvili je mozne zjistit vysledny status dotazem na prislusny cluster manager.


=== Spark API

==== RDD

RDD (Resilient Distributed Dataset) je zakladni konstrukt Spark API. Predstavuje nemennou kolekci zaznamu, rozdelelnou do casti, ktere mohou byt parallelne zpracovany. Tyto casti takzvane partitions jsou typicky rozlozene na vice uzlu v ramci vypocetniho clustru. Jednotlive zaznamy jsou klasicke Java, Python nebo Scala objekty. Pri operaci nad danym RDD je kazda partititon zpracovana prave jednim vykonym procesem.  


==== DataFrames

DataFrame je konstrukt Spark API, ktery reprezentuje tabulku slozenou z radku a sloupcu. Tato tabulka se muze rozkladat na desitkach pocitacu v ramci clusteru. Duvod ulozeni dat na vice pocitacu je zrejmy, bud jsou data prilis velka aby je bylo mozne ulozit na jediny pocitac, nebo je k jejich zpracovani potrebny vetsi vykon. Toto API bylo pridano do Sparku v ramci druhe generace. Stejny koncept, ackoliv omezeny na jediny pocitac, pouzivaji API jako Python Pandas nebo R DataFrames. Toto usadnuje pouzivani Sparku se znalostmi techto API, napriklad jako doplmnujici nastroj pro praci s velkymi objemy dat.

==== Partitions

Partition je, cast dat ulozena na jednom fyzickem pocitaci. Ted pokudy mame DataFrame tabulku, ktera se rozpina pres mnoho dilcich pocitacu, partition je podmonozina radku ktera ulozena na jenom z techto pocitacu. Toto umozne Sparku pracovat paralelne nad jednim zdrojem dat v ramci vypocetniho clusteru. Pokud pracujeme primo s DataFrame API, Spark nad od odstini od manualniho rozdelovani dat avse automaticky provede na pozadi. Nicmene pokud je potreba mit primou kontrolu nad tim jak jsou data fyzicky distribuovana v ramci clusteru je mozne prejit na API nizsi urovne (RDD), ktere nam takovy pristup umoznuji.  

==== Transformace

Ve Sparku jsou zdrojova data typicky nemenna. Pokud chceme provest upravy nad DataFrame, definujeme jednu nebo vice takzvanych transformaci. Tyto transformace instruuji Spark jak ma zmenit zdrojova data. Dulezity je fakt, ze samotna transformace pouze definuje jak se maji data zmenit ale samotnou transaformaci neiniciuje.    


==== Akce

Akce jsou casti API sparku ktere spousti vypocet samotny. Typicky je pouzit RDD jako datovy zdroj, na nem se potenconalne definuje sada transfoirmaci a nakonec se tento vypocet 