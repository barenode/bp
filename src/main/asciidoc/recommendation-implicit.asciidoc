
=== Kolaborativní filtrování pro implicitní datasety

Implicitní data vznikají samotnou interakcí uživatele se systémem. Tato interakce může nabývat mnoho různých podob závislých na konkrétní podobé daného systému. Například pro společnosti poskytující streamovaný obsah jako Netflix nebo Spotify to může být shlédnutí daného obsahu. Ale také zda byl tento obsah shlednutý celý, zda a kdy bylo shlédnutí přerušeno popřípadě počet shlédnutí. Pro internetové knihkupectví jako Amazon toto budou primárně zakoupené tituly. Tyto data se ukladají a následně vyhodnocují tak aby se dosáhlo co možná nejpřesnějších doporučení. Implicitní data mají tedy tendenci být komplexnější než data explicitní což sebou přináší i řadu problémů, které je nutné v daném algoritmu zohlednit:

1. Pouze pozitivní feedback. Pokud evidujeme pouze položky, které si uživatel vybral, je obtížné rozlišit ty, které opravdu preferuje. Například pokud uživatel neshlédl daný film, může to být způsobeno tím že o něm dosud neví ale také tím, že ho nemá rád.

2. Implicitní datasety obsahují velký podíl šumu. Pokud pasivně sledujeme chování uživatele, můžeme pouze hádat jejich preference a pravé motivy. Například i přesto, že uživatel zhlédl některý film, nemusel se mu doopravdy líbit <<cfi>>.

3. Studený start. Nově přidané produkty do systému mají nulový počet interakcí. Systém by měl být schpný doporučovat i takové produkty.  

Tato práce pokrývá dva základní přístupy kolaborativního filtrování pro implicitní datasety, nacházení nejbližších sousedů a faktorizaci matic. 

Systémy založené na nacházení nejbližších sousedů se snaží na základě vypočtené vzdálenosti doporučit nejblíže položené položky. Tyto systémy jsou uživatelsky nebo produktově orientované. V prvním případě se vypočítává vzdálenost mezi uživateli ve druhém mezi produkty. Produktově zalozený přístup je obvykle preferován před uživatelským, podstata produktů se obvykle příliš nemění takže model může být předpočítán a následně použit bez kostantního přepočítávání.

V Systémech založených na fakorizaci matic je interakce uzivatelů s produkty definována jako matice stem:[R_{m,n}] kde stem:[m] určuje počet uzivatelů a stem:[n] počet produktů v katalogu. Skalár stem:[R_{ij}] reprezentuje ohodnocení položky stem:[i] uživatelem stem:[j]. Tato matice je typicky velmi řídká, většina možných kombinací uživatele s produktem v datasetu chybí a je interpretována jako stem:[0]. Algoritmus faktorizuje matici stem:[R] na matice stem:[U] a stem:[V] s malým počtem rozměrů. Tyto rozměry reprezentují takzvané latentní faktory, které odpovídají například žánrům v daném datasetu. Úkolem algoritmů je odhadnout chybějíci hodnoty v matici, proto jsou také někdy nazývány jako algoritmy pro doplňování matic. Narozdíl od matice stem:[R] kde je většina hodnot stem:[0] je matice stem:[\hat{R}], která vznikne jako produkt matic stem:[U] a stem:[V] hustá. Tato matice už obsahuje odhadnuté nenulové hodnoty pro kombinace uživatele s produktem, které ve zdrojové matici stem:[R] chyběly resp. byly nastaveny na stem:[0] <<aas>>. Singular value decomposition (SVD) je vhodný algoritmus, který odebere šum ze zdrojové matice stem:[R] a zároveň  přesně odhadne chybějící hodnoty. Další algoritmus, popularizovaný během slavné Netflix výzvy, je alternating square roots (ALS) <<netflix_prize>>. 





